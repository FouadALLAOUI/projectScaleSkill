# NextJS Continuous Deployment Pipeline
# This pipeline deploys the application to Azure Web App
# Triggers only manually or from successful CI pipeline completions
# Reference: https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

name: 'CD_Pipeline_for_ProjectScaleSkill_App'

trigger: none
pr: none

resources:
  pipelines:
  - pipeline: CI_Pipeline  # Reference to CI pipeline
    source: CI_Pipeline_for_ProjectScaleSkill_App  # CI pipeline name
    trigger: 
      branches:
        include:
          - main  # Or your target branch

pool:
  name: PoolRunners

variables:
  - name: AZURE_CONNECTION_NAME
    value: 'DevAppScaleSkill-ServiceConnection'
  - name: AZURE_WEBAPP_NAME
    value: 'scaleskilldev'  # Replace with your Web App name

stages:
- stage: Deploy
  displayName: 'Deploy to Azure Web App'
  jobs:
  - job: DeployToAzure
    displayName: 'Deploy to Azure Web App'
    steps:

    # Download build artifacts from CI pipeline
    - download: CI_Pipeline
      artifact: 'NextjsBuild'
      displayName: 'Download Build Artifacts'

    # Verify artifact contents and structure
    - script: |
        echo "##[section]Verifying downloaded artifacts..."
        ls -la $(Pipeline.Workspace)/CI_Pipeline/NextjsBuild/
        echo "##[section]Checking if app directory exists..."
        if [ -d "$(Pipeline.Workspace)/CI_Pipeline/NextjsBuild/app" ]; then
          echo "App directory found"
          ls -la $(Pipeline.Workspace)/CI_Pipeline/NextjsBuild/app/
        else
          echo "App directory not found, listing contents:"
          find $(Pipeline.Workspace)/CI_Pipeline/NextjsBuild -type f | head -20
        fi
      displayName: 'Verify Artifact Structure'

    # Stop any existing deployment and clear locks
    - task: AzureCLI@2
      displayName: 'Prepare Azure Web App for Deployment'
      inputs:
        azureSubscription: '$(AZURE_CONNECTION_NAME)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "##[section]Preparing Azure Web App for deployment..."
          
          WEBAPP_NAME="$(AZURE_WEBAPP_NAME)"
          
          # Get resource group
          RG_NAME=$(az webapp show --name $WEBAPP_NAME --query resourceGroup -o tsv)
          echo "Resource Group: $RG_NAME"
          
          # Stop the web app to clear any locks
          echo "##[section]Stopping web app to clear deployment locks..."
          az webapp stop --name $WEBAPP_NAME --resource-group $RG_NAME
          
          # Wait a moment for the stop to complete
          sleep 10
          
          # Check deployment status and cancel any ongoing deployments
          echo "##[section]Checking for ongoing deployments..."
          DEPLOYMENT_STATUS=$(az webapp deployment list --name $WEBAPP_NAME --resource-group $RG_NAME --query "[0].status" -o tsv 2>/dev/null || echo "none")
          
          if [ "$DEPLOYMENT_STATUS" = "Running" ] || [ "$DEPLOYMENT_STATUS" = "Building" ]; then
            echo "Found ongoing deployment with status: $DEPLOYMENT_STATUS"
            echo "Waiting for deployment to complete or timeout..."
            # Wait up to 2 minutes for ongoing deployment to finish
            for i in {1..24}; do
              sleep 5
              CURRENT_STATUS=$(az webapp deployment list --name $WEBAPP_NAME --resource-group $RG_NAME --query "[0].status" -o tsv 2>/dev/null || echo "none")
              if [ "$CURRENT_STATUS" != "Running" ] && [ "$CURRENT_STATUS" != "Building" ]; then
                echo "Deployment completed with status: $CURRENT_STATUS"
                break
              fi
              echo "Still waiting... (${i}/24)"
            done
          else
            echo "No ongoing deployments found"
          fi
          
          # Start the web app
          echo "##[section]Starting web app..."
          az webapp start --name $WEBAPP_NAME --resource-group $RG_NAME
          
          echo "##[section]Web app preparation completed"
      continueOnError: false

    # Determine correct package path
    - script: |
        echo "##[section]Determining correct package path..."
        
        BASE_PATH="$(Pipeline.Workspace)/CI_Pipeline/NextjsBuild"
        
        if [ -d "$BASE_PATH/app" ]; then
          PACKAGE_PATH="$BASE_PATH/app"
          echo "Using app subdirectory: $PACKAGE_PATH"
        elif [ -f "$BASE_PATH/package.json" ]; then
          PACKAGE_PATH="$BASE_PATH"
          echo "Using base directory: $PACKAGE_PATH"
        else
          echo "##[error]Cannot find valid package structure"
          exit 1
        fi
        
        echo "##vso[task.setvariable variable=DEPLOYMENT_PACKAGE_PATH]$PACKAGE_PATH"
        
        # Verify package contents
        echo "##[section]Package contents:"
        ls -la "$PACKAGE_PATH"
        
        if [ -f "$PACKAGE_PATH/package.json" ]; then
          echo "##[section]Package.json found:"
          cat "$PACKAGE_PATH/package.json" | head -20
        fi
      displayName: 'Determine Package Path'

    # Deploy to Azure Web App with retry logic
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: '$(AZURE_CONNECTION_NAME)'
        appType: 'webApp'
        WebAppName: '$(AZURE_WEBAPP_NAME)'
        packageForLinux: '$(DEPLOYMENT_PACKAGE_PATH)'
        enableCustomDeployment: true
        DeploymentType: 'zipDeploy'
        RemoveAdditionalFilesFlag: true
        TakeAppOfflineFlag: true
        RenameFilesFlag: false
        ExcludeFilesFromAppDataFlag: false
        AdditionalArguments: '-retryAttempts 3 -retryInterval 10000'
        StartupCommand: 'npm start'
      displayName: 'Deploy to Azure Web App (Primary Attempt)'
      continueOnError: true
      condition: succeeded()

    # Retry deployment if first attempt failed
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: '$(AZURE_CONNECTION_NAME)'
        appType: 'webApp'
        WebAppName: '$(AZURE_WEBAPP_NAME)'
        packageForLinux: '$(DEPLOYMENT_PACKAGE_PATH)'
        enableCustomDeployment: true
        DeploymentType: 'zipDeploy'
        RemoveAdditionalFilesFlag: true
        TakeAppOfflineFlag: true
        RenameFilesFlag: false
        ExcludeFilesFromAppDataFlag: false
        StartupCommand: 'npm start'
      displayName: 'Deploy to Azure Web App (Retry Attempt)'
      condition: failed()

    # Verify deployment success
    - task: AzureCLI@2
      displayName: 'Verify Deployment'
      inputs:
        azureSubscription: '$(AZURE_CONNECTION_NAME)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "##[section]Verifying deployment..."
          
          WEBAPP_NAME="$(AZURE_WEBAPP_NAME)"
          RG_NAME=$(az webapp show --name $WEBAPP_NAME --query resourceGroup -o tsv)
          
          # Get the app URL
          APP_URL=$(az webapp show --name $WEBAPP_NAME --resource-group $RG_NAME --query "enabledHostNames[0]" -o tsv)
          echo "##[section]Application URL: https://$APP_URL"
          
          # Check app status
          APP_STATE=$(az webapp show --name $WEBAPP_NAME --resource-group $RG_NAME --query "state" -o tsv)
          echo "##[section]Application State: $APP_STATE"
          
          # Get latest deployment status
          LATEST_DEPLOYMENT=$(az webapp deployment list --name $WEBAPP_NAME --resource-group $RG_NAME --query "[0]" -o json 2>/dev/null || echo "{}")
          
          if [ "$LATEST_DEPLOYMENT" != "{}" ]; then
            DEPLOYMENT_STATUS=$(echo $LATEST_DEPLOYMENT | jq -r '.status // "unknown"')
            DEPLOYMENT_ID=$(echo $LATEST_DEPLOYMENT | jq -r '.id // "unknown"')
            echo "##[section]Latest Deployment Status: $DEPLOYMENT_STATUS"
            echo "##[section]Deployment ID: $DEPLOYMENT_ID"
          fi
          
          if [ "$APP_STATE" = "Running" ]; then
            echo "##[section]✅ Deployment verification successful!"
          else
            echo "##[warning]⚠️ App is not in Running state. Current state: $APP_STATE"
          fi
      continueOnError: true

    # Download the image tag artifact from CI pipeline
    #- download: CI_Pipeline
    #  artifact: 'ImageTag'
    #  displayName: 'Download Image Tag'

    # Read the image tag from the file
    #- task: Bash@3
    #  displayName: 'Set Image Tag Variable'
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      IMAGE_TAG=$(cat $(Pipeline.Workspace)/CI_Pipeline/ImageTag/imageTag.txt)
    #      echo "##vso[task.setvariable variable=DOCKER_IMAGE_TAG]$IMAGE_TAG"
    #      echo $(DOCKER_IMAGE_TAG)

    # Deploy to Azure Web App
    #- task: AzureWebAppContainer@1
    #  displayName: 'Deploy to Azure Web App'
    #  inputs:
    #    azureSubscription: 'WebAppService'  # Your Azure service connection name
    #    appName: '$(AZURE_WEBAPP_NAME)'
    #    containers: '$(DOCKERHUB_USER)/$(IMAGE_NAME):$(DOCKER_IMAGE_TAG)'
        