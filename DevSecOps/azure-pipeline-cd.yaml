# NextJS Continuous Deployment Pipeline
# This pipeline deploys the application to Azure Web App
# Triggers only manually or from successful CI pipeline completions
# Reference: https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

name: 'CD_Pipeline_for_ProjectScaleSkill_App'

trigger: none
pr: none

resources:
  pipelines:
  - pipeline: CI_Pipeline  # Reference to CI pipeline
    source: CI_Pipeline_for_ProjectScaleSkill_App  # CI pipeline name
    trigger: 
      branches:
        include:
          - main  # Or your target branch

pool:
  name: PoolRunners

variables:
  - name: AZURE_CONNECTION_NAME
    value: 'DevAppScaleSkill-ServiceConnection'
  - name: AZURE_WEBAPP_NAME
    value: 'scaleskilldev'  # Replace with your Web App name


stages:
- stage: Deploy
  displayName: 'Deploy to Azure Web App'
  jobs:
  - job: DeployToAzure
    displayName: 'Deploy Docker Image to Azure Web App'
    steps:

    # Download build artifacts from CI pipeline
    - download: CI_Pipeline
      artifact: 'NextjsBuild'
      displayName: 'Download Build Artifacts'

    # Verify artifact contents and size
    - script: |
        echo "##[section]Verifying downloaded artifacts..."
        du -sh $(Pipeline.Workspace)/CI_Pipeline/NextjsBuild || true
        echo "##[section]Artifact contents:"
        find $(Pipeline.Workspace)/CI_Pipeline/NextjsBuild -type f | head -20
        
        echo "##[section]Checking for cache files..."
        find $(Pipeline.Workspace)/CI_Pipeline/NextjsBuild -name "*cache*" -type d || echo "No cache directories found (good!)"
        find $(Pipeline.Workspace)/CI_Pipeline/NextjsBuild -name "*.pack" || echo "No pack files found (good!)"
      displayName: 'Verify Artifact Contents'

    # Clean up Azure Web App storage before deployment
    - task: AzureCLI@2
      displayName: 'Clean Azure Web App Storage'
      inputs:
        azureSubscription: '$(AZURE_CONNECTION_NAME)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "##[section]Cleaning up Azure Web App storage..."
          
          # Remove old cache and temporary files via Kudu API
          WEBAPP_NAME="$(AZURE_WEBAPP_NAME)"
          PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles --name $WEBAPP_NAME --resource-group $(az webapp show --name $WEBAPP_NAME --query resourceGroup -o tsv) --xml)
          
          # Get the SCM URL for cleanup
          SCM_URL=$(az webapp show --name $WEBAPP_NAME --resource-group $(az webapp show --name $WEBAPP_NAME --query resourceGroup -o tsv) --query "enabledHostNames[?contains(@, '.scm.')]" -o tsv)
          
          if [ ! -z "$SCM_URL" ]; then
            echo "Web App SCM URL found: $SCM_URL"
            echo "Cleanup will be handled by deployment process"
          else
            echo "No SCM URL found, proceeding with deployment"
          fi
          
          echo "##[section]Storage cleanup preparation completed"
      continueOnError: true

    # Deploy to Azure Web App with optimized settings
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: '$(AZURE_CONNECTION_NAME)'
        appType: 'webApp'
        WebAppName: '$(AZURE_WEBAPP_NAME)'
        packageForLinux: '$(Pipeline.Workspace)/CI_Pipeline/NextjsBuild/app'
        enableCustomDeployment: true
        DeploymentType: 'zipDeploy'
        RemoveAdditionalFilesFlag: true  # Remove extra files to free up space
        TakeAppOfflineFlag: true         # Take app offline during deployment
        StartupCommand: 'cd /home/site/wwwroot && npm install --production --force --legacy-peer-deps && npm start'
      displayName: 'Deploy to Azure Web App (Optimized)'

    # Download the image tag artifact from CI pipeline
    #- download: CI_Pipeline
    #  artifact: 'ImageTag'
    #  displayName: 'Download Image Tag'

    # Read the image tag from the file
    #- task: Bash@3
    #  displayName: 'Set Image Tag Variable'
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      IMAGE_TAG=$(cat $(Pipeline.Workspace)/CI_Pipeline/ImageTag/imageTag.txt)
    #      echo "##vso[task.setvariable variable=DOCKER_IMAGE_TAG]$IMAGE_TAG"
    #      echo $(DOCKER_IMAGE_TAG)

    # Deploy to Azure Web App
    #- task: AzureWebAppContainer@1
    #  displayName: 'Deploy to Azure Web App'
    #  inputs:
    #    azureSubscription: 'WebAppService'  # Your Azure service connection name
    #    appName: '$(AZURE_WEBAPP_NAME)'
    #    containers: '$(DOCKERHUB_USER)/$(IMAGE_NAME):$(DOCKER_IMAGE_TAG)'
        